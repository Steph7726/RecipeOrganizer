{"mappings":"ACCA,MAAM,EAAa,4BACb,EAAiB,CACrB,oBACA,oBACA,kBACA,WACA,kBACD,CAGD,KAAK,gBAAgB,CAAC,UAAW,AAAC,IAChC,EAAM,SAAS,CACb,OAAO,IAAI,CAAC,GAAY,IAAI,CAAC,AAAC,IAC5B,QAAQ,GAAG,CAAC,gDACL,EAAM,MAAM,CAAC,MAGxB,KAAK,WAAW,EAClB,GAGA,KAAK,gBAAgB,CAAC,WAAY,AAAC,IACjC,EAAM,SAAS,CACb,OAAO,IAAI,GAAG,IAAI,CAAC,AAAC,GAClB,QAAQ,GAAG,CACT,EAAQ,GAAG,CAAC,AAAC,IACX,GAAI,IAAQ,EAEV,OADA,QAAQ,GAAG,CAAC,uCAAwC,GAC7C,OAAO,MAAM,CAAC,EAEzB,MAIN,KAAK,OAAO,CAAC,KAAK,EACpB,GAGA,KAAK,gBAAgB,CAAC,QAAS,AAAC,IAC9B,EAAM,WAAW,CACf,OAAO,KAAK,CAAC,EAAM,OAAO,EAAE,IAAI,CAAC,AAAC,GAE9B,GACA,MAAM,EAAM,OAAO,EAAE,KAAK,CAAC,IAAM,OAAO,KAAK,CAAC,uBAItD","sources":["<anon>","js/service-worker.js"],"sourcesContent":["// js/service-worker.js\nconst CACHE_NAME = \"recipe-organizer-cache-v4\";\nconst FILES_TO_CACHE = [\n    \"./html/index.html\",\n    \"./html/tasks.html\",\n    \"./css/style.css\",\n    \"./app.js\",\n    \"./manifest.json\"\n];\n// ✅ INSTALL: Cache all necessary files\nself.addEventListener(\"install\", (event)=>{\n    event.waitUntil(caches.open(CACHE_NAME).then((cache)=>{\n        console.log(\"[Service Worker] Pre-caching offline content\");\n        return cache.addAll(FILES_TO_CACHE);\n    }));\n    self.skipWaiting(); // Activate immediately after install\n});\n// ✅ ACTIVATE: Clear old caches\nself.addEventListener(\"activate\", (event)=>{\n    event.waitUntil(caches.keys().then((keyList)=>Promise.all(keyList.map((key)=>{\n            if (key !== CACHE_NAME) {\n                console.log(\"[Service Worker] Removing old cache:\", key);\n                return caches.delete(key);\n            }\n        }))));\n    self.clients.claim(); // Become active immediately\n});\n// ✅ FETCH: Serve from cache or fetch from network\nself.addEventListener(\"fetch\", (event)=>{\n    event.respondWith(caches.match(event.request).then((response)=>{\n        return response || fetch(event.request).catch(()=>caches.match(\"./html/index.html\"));\n    }));\n});\n\n//# sourceMappingURL=service-worker.js.map\n","// js/service-worker.js\r\nconst CACHE_NAME = \"recipe-organizer-cache-v4\";\r\nconst FILES_TO_CACHE = [\r\n  \"./html/index.html\",\r\n  \"./html/tasks.html\",\r\n  \"./css/style.css\",\r\n  \"./app.js\",\r\n  \"./manifest.json\",\r\n];\r\n\r\n// ✅ INSTALL: Cache all necessary files\r\nself.addEventListener(\"install\", (event) => {\r\n  event.waitUntil(\r\n    caches.open(CACHE_NAME).then((cache) => {\r\n      console.log(\"[Service Worker] Pre-caching offline content\");\r\n      return cache.addAll(FILES_TO_CACHE);\r\n    })\r\n  );\r\n  self.skipWaiting(); // Activate immediately after install\r\n});\r\n\r\n// ✅ ACTIVATE: Clear old caches\r\nself.addEventListener(\"activate\", (event) => {\r\n  event.waitUntil(\r\n    caches.keys().then((keyList) =>\r\n      Promise.all(\r\n        keyList.map((key) => {\r\n          if (key !== CACHE_NAME) {\r\n            console.log(\"[Service Worker] Removing old cache:\", key);\r\n            return caches.delete(key);\r\n          }\r\n        })\r\n      )\r\n    )\r\n  );\r\n  self.clients.claim(); // Become active immediately\r\n});\r\n\r\n// ✅ FETCH: Serve from cache or fetch from network\r\nself.addEventListener(\"fetch\", (event) => {\r\n  event.respondWith(\r\n    caches.match(event.request).then((response) => {\r\n      return (\r\n        response ||\r\n        fetch(event.request).catch(() => caches.match(\"./html/index.html\"))\r\n      );\r\n    })\r\n  );\r\n});\r\n"],"names":["CACHE_NAME","FILES_TO_CACHE","self","addEventListener","event","waitUntil","caches","open","then","cache","console","log","addAll","skipWaiting","keys","keyList","Promise","all","map","key","delete","clients","claim","respondWith","match","request","response","fetch","catch"],"version":3,"file":"service-worker.js.map"}